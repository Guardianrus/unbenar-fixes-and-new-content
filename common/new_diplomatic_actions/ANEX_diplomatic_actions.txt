compromised_logistics = {
	category = covert

	alert_index = 42
	alert_tooltip = demand_dummy_alert_tooltip

	require_acceptance = no # Whether the recipient gets an option to decline

	is_visible = {
		has_idea = claim_fabrication
	}
	is_allowed = {
		has_spy_network_in = {
			who = FROM
			value = 80
		}
		war_with = FROM
	}
	on_accept = {
		add_spy_network_in = {
			who = FROM
			value = -80
		}
		FROM = {
			country_event = {
				id = ANEX_ideas_events.6
			}
		}
	}
 
	ai_acceptance = { # This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
	}

	ai_will_do = { # this is a trigger
		always = yes
	}
}

remove_enemy_claims = {
	category = covert

	alert_index = 42
	alert_tooltip = demand_dummy_alert_tooltip

	require_acceptance = no # Whether the recipient gets an option to decline

	is_visible = {
		has_idea = justiz5
		any_owned_province = {
			is_claim = FROM
		}
	}

	is_allowed = {
		NOT = {
			war_with = FROM
		}
		custom_trigger_tooltip = {
			tooltip = remove_claim
			any_owned_province = {
				is_claim = FROM
			}
		}		
		has_spy_network_in = {
			who = FROM
			value = 50
		}
	}

	on_accept = {
		add_spy_network_in = {
			who = FROM
			value = -50
		}
		random_owned_province = {
			limit = {
				is_claim = FROM 
			}
			remove_claim = FROM
			province_event = {
				id = ANEX_ideas_events.32
			}
		}
	}

	ai_acceptance = { # This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
	}

	ai_will_do = {
		always = yes
	}
}
	

# garantee_for_colony = {
# 	category = influence

# 	alert_index = 42
# 	alert_tooltip = demand_dummy_alert_tooltip

# 	require_acceptance = no # Whether the recipient gets an option to decline

# 	is_visible = {
# 		FROM = {
# 			AND = {
# 				OR = {
# 					is_subject_of_type = crown_colony
# 					is_subject_of_type = self_governing_colony
# 					is_subject_of_type = private_enterprise
# 				}
# 				NOT = {
# 					guaranteed_by = ROOT
# 				}
# 			}
# 		}
# 	}

# 	is_allowed = {
# 		always = yes
# 	}

# 	on_accepte = {
# 		alliance_with = FROM
# 	}

# 	ai_acceptance = { # This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
# 	}

# 	ai_will_do = {
# 		modifier = 0
# 	}
# }
